name: Deploy Nginx Docker Image to EC2

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "ap-southeast-1"  # Set your preferred AWS region
      IMAGE_NAME: "hasanroo10/nginx-hsn-test"

    steps:
    # Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v2

    # Build the Docker image
    - name: Build Docker Image
      run: docker build -t $IMAGE_NAME .

    # Login to Docker Hub
    - name: Login to Docker Hub
      run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

    # Push the Docker image to Docker Hub
    - name: Push Docker Image to Docker Hub
      run: docker push $IMAGE_NAME

    # Get EC2 Instance IDs of running instances using the Name tag and state filter
    - name: Get EC2 Instance IDs (only running instances)
      run: |
        INSTANCE_IDS=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=autoscaling-instance" \
                   "Name=instance-state-name,Values=running" \
          --query "Reservations[].Instances[].InstanceId" \
          --output text)
        echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV  # Save to environment variable

    # Debugging: Check the EC2 Instance IDs
    - name: Debug INSTANCE_IDS
      run: |
        echo "INSTANCE_IDS: $INSTANCE_IDS"
        if [ -z "$INSTANCE_IDS" ]; then
          echo "No running EC2 instances found with the tag 'autoscaling-instance'."
          exit 1
        fi

    # Check if instance is registered with SSM
    - name: Check if EC2 instance is registered with SSM
      run: |
        for INSTANCE_ID in $INSTANCE_IDS; do
          echo "Checking if instance $INSTANCE_ID is registered with SSM"
          aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$INSTANCE_ID" --region $AWS_REGION || echo "Instance $INSTANCE_ID not registered with SSM."
        done

    # Deploy Docker Image to EC2 instances using SSM
    - name: Deploy Docker Image to EC2 using SSM
      run: |
        for INSTANCE_ID in $INSTANCE_IDS; do
          echo "Deploying to instance: $INSTANCE_ID"
          
          # Send SSM command
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying Docker container" \
            --parameters 'commands=[
              "sudo apt update",
              "sudo apt install -y docker.io",
              "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin",
              "docker ps -q --filter \"ancestor=$IMAGE_NAME\" | grep -q . && docker stop $(docker ps -q --filter \"ancestor=$IMAGE_NAME\") && docker rm $(docker ps -q --filter \"ancestor=$IMAGE_NAME\")",
              "docker pull $IMAGE_NAME",
              "docker run -d -p 80:80 $IMAGE_NAME",
              "docker ps -a"
            ]' \
            --region $AWS_REGION \
            --output text \
            --query "Command.CommandId")
    
          echo "Command ID: $COMMAND_ID"
    
          # Check the command invocation status
          sleep 30  # Wait for the command to execute
    
          # Get command invocation status
          INVOCATION_STATUS=$(aws ssm list-command-invocations \
            --command-id $COMMAND_ID \
            --region $AWS_REGION \
            --query "CommandInvocations[0].Status" \
            --output text)
    
          if [ "$INVOCATION_STATUS" == "Success" ]; then
            echo "Command executed successfully on instance: $INSTANCE_ID"
          else
            echo "Command failed on instance: $INSTANCE_ID. Checking the invocation details for errors."
    
            # Fetch detailed invocation output
            OUTPUT=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id $INSTANCE_ID \
              --region $AWS_REGION \
              --query "StandardOutputContent" \
              --output text)
            
            echo "Command output: $OUTPUT"
          fi
        done
